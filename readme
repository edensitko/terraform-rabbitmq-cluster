# 🚀 RabbitMQ Cluster on AWS with Terraform

This project automates the deployment of a **highly available RabbitMQ cluster** using **Terraform** and **AWS** services.

## ✅ Features

- 🧱 Infrastructure as Code with Terraform
- 💇 Multi-node RabbitMQ cluster using Docker
- 🖁️ Auto Scaling Group (ASG) for horizontal scaling
- ⚖️ Application Load Balancer (ALB) to route traffic to the cluster (port 80 → 15672)
- 🔒 Secure with AWS security groups
- 📡 Cluster joins automatically using shared cookie
- 📦 Lightweight deployment via Docker containers

## 🗂️ Folder Structure

```
.
├── main.tf
├── variables.tf
├── outputs.tf
├── terraform.tfvars
├── network.tf
├── .gitignore
└── README.md
```

## 🛠️ Prerequisites

- AWS CLI configured
- Terraform installed (`>= 1.0`)
- Valid AWS credentials
- An existing VPC or use the included `network.tf`

## 🚀 Deployment

1. Initialize Terraform:
   ```bash
   terraform init
   ```

2. Apply the configuration:
   ```bash
   terraform apply -auto-approve
   ```

3. Access the RabbitMQ Web UI:
   ```
   http://<ALB_DNS>:80
   ```

   Login:
   - **Username**: `admin`
   - **Password**: `admin123`

## 🧪 Testing Cluster

Once deployed, navigate to the **Cluster** tab in the RabbitMQ UI and verify multiple nodes (e.g. `rabbit@ip-...`).

To destroy the infrastructure:

```bash
terraform destroy -auto-approve
```
